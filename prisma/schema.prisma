datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String? @unique
  username String?
  timezone String?
  description String?

  emailVerified  DateTime?
  hashedPassword String?
  image          String?

  eventTypes    EventType[]
  schedules Schedule[]
  accounts      Account[]
  sessions      Session[]
  verificationTokens VerificationToken[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Schedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name String
  isDefault Boolean?

  availableDays AvailableDays[]

  eventTypes EventType[]
  user User @relation(fields: [userId], references: [id])
}

type AvailableDays {
  day DayOfWeek
  value String?
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model EventType {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  scheduleId String @db.ObjectId
  title String
  eventName     String?
  duration Int
  url String
  description  String?
  color        String?
  hidden Boolean? @default(false)

  allowGuests Boolean?
  dateRange    DateRange?
  location     Location?
  afterBooking AfterBooking
  questions    Question[]
  requiresConfirmation Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

type Question {
  label   String
  identifier String
  placeholder String?
  required   Boolean @default(false)
  answerType AnswerType
  isDeletable Boolean? @default(true)
  options    String?
}

type AfterBooking {
  event       AfterBookingEvent
  redirectUrl String?
}

type DateRange {
  type  DateRangeType
  value String?
}

type Location {
  type  LocationType
  value String
}

enum AfterBookingEvent {
  MYCAL_CONFIRMATION_PAGE
  EXTERNAL_REDIRECT
}

enum DateRangeType {
  DATE_RANGE
  CALENDAR_DAYS
  INDEFINITELY
}

enum LocationType {
  PHONE_CALL
  IN_PERSON_MEETING
}

enum AnswerType {
  MULTIPLE_LINES
  ONE_LINE
  PHONE_NUMBER
  EMAIL
  RADIO_BUTTONS
  CHECKBOXES
  DROPDOWN
  NUMBER
}

model Booking {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  eventTypeId String @db.ObjectId
  userId      String @db.ObjectId

  date         DateTime
  duration     Int
  meetingNotes String?
  data BookingData[]

  isConfirmed Boolean?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
}

type BookingData {
  identifier String
  value String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String @db.ObjectId
  token      String
  expires    DateTime

  user User @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
